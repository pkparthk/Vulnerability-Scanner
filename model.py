import json
import time
import google.generativeai as genai

def extract_cwe_ids(file_path):
    cwe_ids = []  
    with open(file_path, "r") as f:
        data = json.load(f)  
        for vulnerability in data["owasp_zap_results"]:
            cwe_id = vulnerability.get("cweid")  
            if cwe_id is not None:  
                cwe_ids.append(cwe_id)  
    return cwe_ids

def get_cwe_information(cwe_ids, output_file):
    genai.configure(api_key='AIzaSyCKmwh6S09Dv13VhRcJub33TlTrStnXBLo')
    model = genai.GenerativeModel('gemini-pro')
    chat = model.start_chat()

    print("Extracted CWE IDs:", cwe_ids)
    print("Fetching information for each CWE ID...")

    with open(output_file, 'w') as f:
        for cwe_id in cwe_ids:
            try:
                message = f"Can you provide detailed information about the Common Weakness Enumeration with ID {cwe_id}?"
                response = chat.send_message(message)

                cwe_info = response.parts[0].text
                print(f"Information for CWE ID {cwe_id}:")
                print(cwe_info)
                print()
                
                f.write(f"Information for CWE ID {cwe_id}:\n")
                f.write(cwe_info + "\n\n")

                time.sleep(1)
            except genai.types.generation_types.StopCandidateException as e:
                print(f"Encountered an issue while fetching information for CWE ID {cwe_id}: {e}")
                print("Skipping to the next CWE ID...")
                continue

if __name__ == "__main__":
    file_path = "scan_results_20240518161041.json"  
    cwe_ids = extract_cwe_ids(file_path)  
    
    output_file = "cwe_information.txt"
    get_cwe_information(cwe_ids, output_file)  
