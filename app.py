import socket
import json
import nmap
import os
import time
from zapv2 import ZAPv2
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS

app = Flask(__name__)
CORS(app, origins='http://localhost:3000')



def resolve_ip(target_url):
    try:
        hostname = target_url.split("//")[-1].split("/")[0]
        print(f"Resolving hostname: {hostname}")
        ip_address = socket.gethostbyname(hostname)
        print(f"Resolved IP address: {ip_address}")
        return ip_address
    except socket.gaierror as e:
        print(f"Failed to resolve IP address for {hostname}: {e}")
        return None

def run_owasp_test(target_url, api_key):
    zap = ZAPv2(apikey=api_key)
    if not target_url.startswith(('http://', 'https://')):
        target_url = 'http://' + target_url
    
    print('Spidering target {}'.format(target_url))
    scanID = zap.spider.scan(target_url)
    while int(zap.spider.status(scanID)) < 100:
        print('Spider progress %: {}'.format(zap.spider.status(scanID)))
        time.sleep(1)

    print('Spider has completed!')
    print('\n'.join(map(str, zap.spider.results(scanID))))
    
    print("Performing OWASP ZAP active scan...")
    try:
        scan_id = zap.ascan.scan(target_url)
    except Exception as e:
        print(f"Error starting OWASP ZAP scan: {e}")
        return None
    
    
    if not scan_id or not scan_id.isdigit():
        print(f"Failed to start OWASP ZAP scan. Invalid scan ID received: {scan_id}")
        return None

    try:
        while int(zap.ascan.status(scan_id)) < 100:
            print(f"Scan progress: {zap.ascan.status(scan_id)}%")
            time.sleep(5)
    except ValueError as e:
        print(f"Error retrieving scan status: {e}")
        return None

    print("Retrieving OWASP ZAP scan results...")
    zap_results = zap.core.alerts(baseurl=target_url)

    return zap_results


def run_nmap_scan(target_ip):
    nm = nmap.PortScanner()

    try:
        print("Performing Nmap scan...")
        nm.scan(hosts=target_ip, arguments='-sV -p 1-65535')

        nmap_results = nm[target_ip]
        return nmap_results
    except Exception as e:
        print(f"Error during Nmap scan: {e}")
        return None


def save_results(zap_results, nmap_results, output_file):
    combined_results = {
        "owasp_zap_results": zap_results,
        "nmap_results": nmap_results
    }

    with open(output_file, "w") as f:
        json.dump(combined_results, f, indent=4)

    print(f"Combined scan results saved to {output_file}")
    return combined_results

@app.route('/scan', methods=['POST'])
def scan():
    data = request.json
    target_url = data.get('target_url')

    target_ip = resolve_ip(target_url)

    if target_ip:
        api_key_file = "api_key.txt"

        try:
            with open(api_key_file, "r") as f:
                api_key = f.read().strip()
        except FileNotFoundError:
            return jsonify({"error": f"API key file {api_key_file} not found."}), 500

        timestamp = time.strftime("%Y%m%d%H%M%S")
        output_file = f"scan_results_{timestamp}.json"

        zap_results = run_owasp_test(target_url, api_key)
        nmap_results = run_nmap_scan(target_ip)

        if nmap_results:
            combined_result = save_results(zap_results, nmap_results, output_file)
            return jsonify({"message": "Scan completed successfully.", "result": combined_result})
        else:
            return jsonify({"error": "Nmap scan failed."}), 500
    else:
        return jsonify({"error": "Failed to resolve IP address."}), 500

if __name__ == "__main__":
    app.run(debug=True) 
